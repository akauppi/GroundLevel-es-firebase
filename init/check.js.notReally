/*
* init/check.js
*
* Schema check for 'opsConfig.js' entries
*/

function check(o, template) {   // (object, object) => ()   // throws an Error on failures; may print warnings to 'console.warn'

  if (Object.keys(template).length === 0) {   // {}: allowed as a "skip" object
    return;

  } else {
    Object.entries(template).forEach( ([key, tv]) => {
      if (tv.last === '?' && o[key] === undefined) {  // optional value
        // nada
      } else if (tv.startsWith('string')) {
        if (typeof o[key] !== 'string') {
          throw new Error(`Configuration mismatch: expected '.${key}' type to be a string but was: ${typeof o[key]}`);
        }
        //... more types
      } else {    // 'o' must carry the exact value ("airbrake", ...)
        if (o[key] !== tv) {
          throw new Error(`Configuration mismatch: expected '.${key}' to be '${tv}' but was: '${o[key]}'`);
        }
      }
    });

    Object.entries(o).forEach( ([key, ov]) => {
      if (!template[key]) {
        throw new Error(`Unexpected key in config: '${key}': ${ov}`);
      }
    });
  }
}

export {
  check
}
