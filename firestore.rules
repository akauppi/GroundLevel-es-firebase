rules_version = '2';

// Note: When editing the rules, consider using the online Rules Simulator:
//      e.g. https://console.firebase.google.com/u/0/project/vue-rollup-example/database/firestore/rules
//
service cloud.firestore {
  match /databases/{database}/documents {

    // tbd. removed projects likely to get their own collection (simpler)

    // Access cost:
    //    read: 1
    //    write: 1
    //
    match /projects/{projectId} {
      // Read
      //    - authors can see all projects, also removed (archived)
      //    - collaborators see only active projects
      //
      // Note: Checking for validity at reads is optional. Doing validation guards against bad data caused by manual
      //       changes, admin SDK changes, or data written by earlier generations of the security rules.
      //
      allow read: if (isAuthor() || isCollaborator() && !isRemoved())
        //&& validProject2()       // optional: enable if you want to guard against bad data instead of letting client cope with it

      // Creation
      //    - the creating user must list themselves as an author
      //    - creating time-stamp must be a 'FieldValue.serverTimestamp()'
      //    - may not be created as 'removed'
      //
      allow create: if isSignedIn()
        && validProjectWrite()
        && request.resource.data.created == request.time
        && !isRemovedAfter()
        && request.auth.uid in request.resource.data.authors    // creator added as an author (we could go soft on this..)

      // Update
      //    | field    | mutability |
      //    |----------|------------|
      //    | /title   | author may change |
      //    | /created | no |
      //    | /removed | author may add or remove; no other fields may change; if added, must be the server timestamp |
      //    | /authors | author may change; at least one author must remain |
      //    | /collaborators | author may change |
      //
      allow update: if isAuthor()
        && validProjectWrite()
        && request.resource.data.created == resource.data.created
        && removedUnaffected() || (
            onlyRemovedAffected() && (
              diff().addedKeys() == ["removed"].toSet() ? request.resource.data.removed == request.time :
              diff().removedKeys() == ["removed"].toSet() ? true :
              false
            ))

      function onlyRemovedAffected() {
        return diff().affectedKeys() == ["removed"].toSet()
      }
      function removedUnaffected() {
        // Implementation note: if not using '.diff', you must consider the case when there is no '.removed' (it's optional).
        return !( "removed" in diff().affectedKeys() )
      }

      allow delete: if false        // no deletion via web app

      // Project consistency:
      //  - title (string) may not be empty
      //  - created (timestamp) must exist
      //  - removed (timestamp) is optional; if exists, must be a server time stamp now or in the past
      //  - at least one author must exist
      //  - collaborators can be empty
      //  - users are either in 'authors' or in 'collaborators' (but not in both)
      //
      function validProjectWrite() {
        let possibleKeys = ["title", "created", "removed", "authors", "collaborators"].toSet();

        return true
          && after().title is string && after().title != ''
          && after().created is timestamp
          && (!isRemovedAfter() || (after().removed == request.time))
          && after().authors is list && after().authors.size() > 0
          && after().collaborators is list
          && after().authors.toSet().intersection( after().collaborators.toSet() ).size() == 0
            // no common entries (could also omit this; logic would work even if a user is listed in both)

          && possibleKeys.hasAll( request.resource.data.keys() )        // no unexpected keys
      }

      /*** DELAYED. Making a read version of validity is very hard.
      // DEBUG for seeing, what causes reads to have a problem!
      function validProject2() {
        let possibleKeys = ["title", "created", "removed", "authors", "collaborators"].toSet();

        return true
          //&& resource.data.title is string && resource.data.title != ''
          //&& request.resource.data.created is timestamp
          //&& (!isRemovedAfter() || (request.resource.data.removed <= request.time))
          //&& request.resource.data.authors is list && request.resource.data.authors.size() > 0
          //&& request.resource.data.collaborators is list
          //&& request.resource.data.authors.toSet().intersection( after().collaborators.toSet() ).size() == 0
            // no common entries (could also omit this; logic would work even if a user is listed in both)

          //&& possibleKeys.hasAll( resource.data.keys() )        // no unexpected keys
      }
      ***/

      function isAuthor() {
        return isSignedIn() &&
          request.auth.uid in prior().authors    // resource.data.authors
      }

      function isCollaborator() {
        return isSignedIn() &&
          request.auth.uid in prior().collaborators
      }

      function isRemoved() {
        return "removed" in resource.data
      }

      function isRemovedAfter() {
        return "removed" in request.resource.data
      }

//--- Visited ---

      // Access cost:
      //    read: 2
      //    write: 2
      //
      match /visited/{userId} {
        // Read:
        //	- all project members can read each other's last visit time
        //
        allow read: if EXT_isCollaboratorOrAuthor()

        // Write:
        //	- only the user themselves can reset their value
        //
        // Note: requiring the 'after' value to be the server time stamp essentially disallows deletes.
        //
        allow write: if EXT_isCollaboratorOrAuthor()
          && validVisitedWrite()
          && userId == request.auth.uid
          && after().at == request.time

        allow delete: if false

        // Visited consistency:
        //  - 'at' must be a timestamp
        //  - no other fields
        //
        function validVisitedWrite() {
          return true
            && (after().at is timestamp && after().at == request.time)
            && afterKeysEq(["at"])      // no other fields
        }
      }

//--- Symbols ---

      // Access cost:
      //    read: 2
      //    write: 2
      //
      // tbd. Observe access cost in real world scenerio: user tracking changes to all symbols, within a project.
      //      Is it acceptable?
      //
      match /symbols/{symbolId} {
        // Read:
        //  - all members of the project can read
        //
        allow read: if EXT_isCollaboratorOrAuthor()
          //&& validSymbol()      // guards against bad data in test setup, manual Firestore edits or from earlier schemas

        // Creation:
        //	- the creator needs to claim the symbol to themselves, at creation (we can relax this, if needed)
        //
        allow create: if EXT_isCollaboratorOrAuthor()
          && validSymbolWrite()
          && after().claimed.by == request.auth.uid
          && after().claimed.at == request.time

        // Updates:
        //  - can claim a non-claimed symbol
        //  - can do changes to an already claimed symbol
        //  - can revoke the claim
        //  - claim itself cannot be changed; only revoked
        //
        allow update: if EXT_isCollaboratorOrAuthor()
          && validSymbolWrite()
          && (      // case A: claiming an unclaimed symbol
            !isClaimed() ? (
              after().claimed.by == request.auth.uid &&		// I make the claim
              after().claimed.at == request.time
            ) : isClaimedByMe() && (  // case B: changing other fields while claimed
                  after().claimed == prior().claimed
                ) || (   // case C: revoking the claim
                  diff().affectedKeys() == ["claimed"].toSet() &&     // only '.claimed' affected
                  !("claimed" in after())                             // ..and it is removed
                )
            )

        // Delete:
        //	- can delete a symbol claimed to themselves
        //
        allow delete: if EXT_isCollaboratorOrAuthor()
          && isClaimedByMe()

        function validSymbolWrite() {
          let requiredKeys = ['layer','shape','size','fillColor','center'].toSet();
          let possibleKeys = requiredKeys.union( ['claimed'].toSet() );

          return true
            && (after().keys().toSet().hasAll(requiredKeys) &&
                possibleKeys.hasAll(after().keys()))
            && after().layer is int
            && after().shape in ['star']      // enum
            && after()['size'] > 0
            && after().fillColor is string
            && (keysEq( after().center, ["x","y"] ) &&
               after().center.x is number &&
               after().center.y is number
            )
            && (!("claimed" in after()) || (
              keysEq( after().claimed, ["by","at"] ) &&
              after().claimed.by is string &&
              after().claimed.at is timestamp // and <= request.time
            ))
        }

        function isClaimedByMe() {
          return isClaimed() && prior().claimed.by == request.auth.uid
        }

        function isClaimed() {
          // Note: 'resource != null' required in the online Rules Playground (was it; is it still?); not worth it: keep rules alike for all environments!!!
          return /*resource != null &&*/ "claimed" in resource.data
        }
      } // symbols

      // Functions for sub-collections
      //
      // While the 'project' documents can address their 'authors' and 'collaborators' fields directly, sub-collection
      // documents must use 'get'. This also implies an added billing cost for processing those security rules.

      function EXT_isCollaboratorOrAuthor() {
        let data = isSignedIn() ? get( /databases/$(database)/documents/projects/$(projectId) ).data : {};

        return isSignedIn() && (
          request.auth.uid in data.collaborators ||
          request.auth.uid in data.authors
        )
      }
    }   // project

//--- Invites ---
//
// Writable by authors and collaborators, to invite new members to a project. From there, Cloud Functions should do all.

    // Access cost:
    //    read: 2
    //    write: 2
    //
    match /invites/{inviteId} {   // inviteId: '<email>:<projectId>'
      // Read:
      //  - only Cloud Functions read invites
      allow read: if false

      // Create:
      //  - any collaborator or author of a project may invite more people
      //  - a previous invite may be overwritten (= extended)
      //
      allow create: if true
        // if (inviting as author) invitor must be an author (this gets checked again, once the guest turns up)
        && after().asAuthor ?
            PROJ_isAuthor_COST1( after().project ) :
            PROJ_isCollaboratorOrAuthor_COST1( after().project )      // else anyone in the project can invite
        && validInviteWrite()

      // tbd. if we want to allow extending existing invite, the 'update' rule needs to be opened (a 'set' for an
      //        existing entry observes it).
      allow update: if false

      allow delete: if false

      function validInviteWrite() {
        let requiredKeys = ['email','project','asAuthor','by','at'];

        return true
          && afterKeysEq(requiredKeys)
          && request.resource.id == after().email +":"+ after().project	  // validate the id schema
          && after().email is string
          && after().project is string
          && after().asAuthor is bool
          && after().by == request.auth.uid
          && after().at == request.time
      }

      // Checking membership in a project from other collections.
      //
      // Unlike 'symbols' etc., 'invites' is not a sub-collection of 'projectC'. Thus, the project ID comes as a param,
      // not from the 'match'.
      //
      // Note: Below is optimized for just one external 'get' per rule evaluation, but it is possible this is not
      //      necessary (do two gets to the same entry count as 1 or 2 in rule evaluation billing?).
      //
      function _PROJ_isMember_COST1(projectId, mustBeAuthor) {  // (string, bool) => bool
        let data = isSignedIn() ? get( /databases/$(database)/documents/projects/$(projectId) ).data : {};

        return isSignedIn() && (
          request.auth.uid in data.authors ||
          ((!mustBeAuthor) && request.auth.uid in data.collaborators)
        )
      }
      function PROJ_isAuthor_COST1(projectId) { return _PROJ_isMember_COST1(projectId, true); }
      function PROJ_isCollaboratorOrAuthor_COST1(projectId) { return _PROJ_isMember_COST1(projectId, false); }

    } // invites

//--- User info ---
//
// Fully handled via Cloud Functions

    match /userInfo/{userId} {
      allow read, write: if false
    }

//--- Helpers (visible to all matches) ---

    // Aliases
    function prior() { return resource.data; }
    function after() { return request.resource.data; }
    function diff()  { return request.resource.data.diff(resource.data) }

    // Compare root level keys with 'arr'; those and only those keys should exist.
    //
    function afterKeysEq(arr) {
      return keysEq( request.resource.data, arr );
    }

    // Test two lists for equality.
    //
    function keysEq(a,b) {        // ({.keys(): List}, List|Set) => Boolean
      return a.keys().toSet() == b.toSet();
    }

    function isSignedIn() {
      return request.auth != null && request.auth.uid != null;
    }
  } // database
}
